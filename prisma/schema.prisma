generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model order {
  orderId       Int        @id @default(autoincrement()) @map("order_id")
  fkWalletId    Int?       @map("fk_wallet_id")
  fkStockTicker String     @map("fk_stock_ticker") @db.VarChar(15)
  type          order_type
  date          DateTime   @default(now()) @db.Timestamp(0)
  stockPrice    Float      @map("stock_price")
  stockShares   Float      @map("stock_shares")
  stock         stock      @relation(fields: [fkStockTicker], references: [stockTicker], onDelete: NoAction, map: "fk_order_stock")
  wallet        wallet?    @relation(fields: [fkWalletId], references: [walletId], map: "fk_order_wallet")

  @@index([fkWalletId], map: "fk_account_id_idx")
  @@index([fkStockTicker], map: "fk_order_stock_stock_ticker_idx")
}

model player {
  playerId Int      @id @default(autoincrement()) @map("player_id")
  name     String   @db.VarChar(100)
  email    String   @unique(map: "email_UNIQUE") @db.VarChar(45)
  phone    String   @unique(map: "phone_UNIQUE") @db.VarChar(45)
  password String   @db.Char(60)
  wallet   wallet[]
}

model stock {
  stockTicker      String           @id @map("stock_ticker") @db.VarChar(15)
  name             String           @db.VarChar(60)
  description      String?          @db.VarChar(254)
  currentPrice     Float?           @map("current_price")
  percentChange    Float?           @map("percent_change")
  lastUpdated      DateTime         @default(now()) @map("last_updated") @db.Timestamp(0)
  order            order[]
  wallet_has_stock WalletHasStock[]
}

model transfer {
  transferId                           Int      @id @default(autoincrement()) @map("transfer_id")
  fkWalletFrom                         Int      @map("fk_wallet_from")
  fkWalletTo                           Int      @map("fk_wallet_to")
  date                                 DateTime @db.DateTime(0)
  amount                               Float

  @@index([fkWalletFrom], map: "fk_account_from_idx")
  @@index([fkWalletTo], map: "fk_account_to_idx")
}

model wallet {
  walletId                                 Int              @id @default(autoincrement()) @map("wallet_id")
  fkPlayerId                               Int              @map("fk_player_id")
  nickname                                 String           @db.VarChar(45)
  balance                                  Float
  created                                  DateTime         @db.DateTime(0)
  player                                   player           @relation(fields: [fkPlayerId], references: [playerId], onDelete: Cascade, onUpdate: NoAction, map: "fk_wallet_player")
  order                                    order[]
  wallet_has_stock                         WalletHasStock[]

  @@index([fkPlayerId], map: "fkPlayerId_idx")
}

model WalletHasStock {
  accountHasStockId Int    @id @default(autoincrement()) @map("account_has_stock_id")
  fkWalletId        Int    @map("fk_wallet_id")
  fkStockTicker     String @map("fk_stock_ticker") @db.VarChar(15)
  stockShares       Float  @map("stock_shares")
  avgPrice          Float  @map("avg_price")
  stock             stock  @relation(fields: [fkStockTicker], references: [stockTicker], onDelete: NoAction, map: "fk_wallet_has_stock_stock")
  wallet            wallet @relation(fields: [fkWalletId], references: [walletId], onDelete: NoAction, onUpdate: NoAction, map: "fkWalletId")

  @@index([fkStockTicker], map: "fk_account_has_stock_ticker_idx")
  @@index([fkWalletId], map: "fk_account_id_idx")
  @@map("wallet_has_stock")
}

enum order_type {
  BUY
  SELL
}
